# Copyright (c) 2018-2023, Firas Khalil Khana
# Distributed under the terms of the ISC License

import std/os

import
    constants,
    envenomate,
    teeth

#
# Cross Functions
#

proc radula_behave_bootstrap_cross_ccache*() =
    putEnv(RADULA_ENVIRONMENT_CCACHE_CONFIGURATION,
        RADULA_PATH_RADULA_CLUSTERS / RADULA_DIRECTORY_GLAUCUS /
        RADULA_CERAS_CCACHE / RADULA_FILE_CCACHE_CONFIGURATION)
    putEnv(RADULA_ENVIRONMENT_CCACHE_DIRECTORY, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS) / RADULA_CERAS_CCACHE)
    putEnv(RADULA_ENVIRONMENT_PATH, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_TOOLCHAIN) / RADULA_PATH_USR /
        RADULA_PATH_LIB / RADULA_CERAS_CCACHE & ':' & getEnv(RADULA_ENVIRONMENT_PATH))
    createDir(getEnv(RADULA_ENVIRONMENT_CCACHE_DIRECTORY))

proc radula_behave_bootstrap_cross_envenomate*() =
    radula_behave_envenomate(@[
        # Filesystem & Package Management
        RADULA_CERAS_HYDROSKELETON,
        RADULA_CERAS_IANA_ETC,
        RADULA_CERAS_CERATA,
        RADULA_CERAS_RADULA,

        # Headers
        RADULA_CERAS_MUSL_UTILS,
        RADULA_CERAS_LINUX_HEADERS,

        # Init
        RADULA_CERAS_SKALIBS,
        RADULA_CERAS_NSSS,
        RADULA_CERAS_EXECLINE,
        RADULA_CERAS_S6,
        RADULA_CERAS_UTMPS,

        # Compatibility
        RADULA_CERAS_MUSL_FTS,
        RADULA_CERAS_MUSL_OBSTACK,
        RADULA_CERAS_MUSL_RPMATCH,
        RADULA_CERAS_LIBUCONTEXT,

        # i18n & L10n
        RADULA_CERAS_GETTEXT_TINY,
        RADULA_CERAS_MUSL_LOCALES,

        # Permissions
        RADULA_CERAS_ATTR,
        RADULA_CERAS_ACL,
        RADULA_CERAS_SHADOW,

        # Hashing
        RADULA_CERAS_LIBRESSL,
        RADULA_CERAS_XXHASH,

        # Userland
        RADULA_CERAS_TOYBOX,
        RADULA_CERAS_DIFFUTILS,
        RADULA_CERAS_FILE,
        RADULA_CERAS_FINDUTILS,
        RADULA_CERAS_SED,

        # Development
        RADULA_CERAS_EXPAT,

        # Compression
        RADULA_CERAS_BZIP2,
        RADULA_CERAS_LBZIP2,
        RADULA_CERAS_LBZIP2_UTILS,
        RADULA_CERAS_LZ4,
        RADULA_CERAS_LZLIB,
        RADULA_CERAS_PLZIP,
        RADULA_CERAS_XZ,
        RADULA_CERAS_ZLIB_NG,
        RADULA_CERAS_PIGZ,
        RADULA_CERAS_ZSTD,
        RADULA_CERAS_LIBARCHIVE,

        # Development
        RADULA_CERAS_AUTOCONF,
        RADULA_CERAS_AUTOMAKE,
        RADULA_CERAS_BINUTILS,
        RADULA_CERAS_BYACC,
        RADULA_CERAS_CMAKE,
        RADULA_CERAS_FLEX,
        RADULA_CERAS_GCC,
        RADULA_CERAS_HELP2MAN,
        RADULA_CERAS_LIBTOOL,
        RADULA_CERAS_MAKE,
        RADULA_CERAS_MAWK,
        RADULA_CERAS_OM4,
        RADULA_CERAS_PATCH,
        RADULA_CERAS_PKGCONF,
        RADULA_CERAS_PYTHON,
        RADULA_CERAS_SAMURAI,

        # Synchronization
        RADULA_CERAS_RSYNC,

        # Editors, Pagers and Shells
        RADULA_CERAS_NETBSD_CURSES,
        RADULA_CERAS_LIBEDIT,
        RADULA_CERAS_PCRE2,
        RADULA_CERAS_DASH,
        RADULA_CERAS_YASH,
        RADULA_CERAS_LESS,
        RADULA_CERAS_VIM,
        RADULA_CERAS_MANDOC,

        # Userland
        RADULA_CERAS_BC,
        RADULA_CERAS_GREP,
        RADULA_CERAS_PLOCATE,

        # Networking
        RADULA_CERAS_LIBCAP,
        RADULA_CERAS_LIBCAP_NG,
        RADULA_CERAS_IPROUTE2,
        RADULA_CERAS_IPUTILS,
        RADULA_CERAS_SDHCP,
        RADULA_CERAS_CURL,
        RADULA_CERAS_WGET2,

        # Time Zone
        RADULA_CERAS_TZCODE,
        RADULA_CERAS_TZDATA,

        # Utilities
        RADULA_CERAS_KMOD,
        RADULA_CERAS_EUDEV,
        RADULA_CERAS_PSMISC,
        RADULA_CERAS_PROCPS_NG,
        RADULA_CERAS_UTIL_LINUX,
        RADULA_CERAS_E2FSPROGS,
        RADULA_CERAS_PCIUTILS,
        RADULA_CERAS_HWDATA,

        # Services
        RADULA_CERAS_S6_LINUX_INIT,
        RADULA_CERAS_S6_RC,
        RADULA_CERAS_S6_BOOT_SCRIPTS,

        # Kernel
        RADULA_CERAS_LIBUARGP,
        RADULA_CERAS_LIBELF,
        RADULA_CERAS_LINUX
    ], RADULA_DIRECTORY_CROSS, false)

proc radula_behave_bootstrap_cross_environment_directories*() =
    let path = getEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY) / RADULA_DIRECTORY_CROSS

    putEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS, path)

    putEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS_BUILDS, path / RADULA_DIRECTORY_BUILDS)
    putEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS_SOURCES, path / RADULA_DIRECTORY_SOURCES)

    # cross log file
    putEnv(RADULA_ENVIRONMENT_FILE_CROSS_LOG, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_LOGS) / RADULA_DIRECTORY_CROSS &
        CurDir & RADULA_DIRECTORY_LOGS)

proc radula_behave_bootstrap_cross_environment_pkg_config*() =
    putEnv(RADULA_ENVIRONMENT_PKG_CONFIG_LIBDIR, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_CROSS) / RADULA_PATH_PKG_CONFIG_LIBDIR_PATH)
    putEnv(RADULA_ENVIRONMENT_PKG_CONFIG_PATH, getEnv(RADULA_ENVIRONMENT_PKG_CONFIG_LIBDIR))
    putEnv(RADULA_ENVIRONMENT_PKG_CONFIG_SYSROOT_DIR, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_CROSS) / RADULA_PATH_PKG_CONFIG_SYSROOT_DIR)

    # These environment variables are only `pkgconf` specific, but setting them
    # won't do any harm...
    putEnv(RADULA_ENVIRONMENT_PKG_CONFIG_SYSTEM_INCLUDE_PATH, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_CROSS) / RADULA_PATH_PKG_CONFIG_SYSTEM_INCLUDE_PATH)
    putEnv(RADULA_ENVIRONMENT_PKG_CONFIG_SYSTEM_LIBRARY_PATH, getEnv(
        RADULA_ENVIRONMENT_DIRECTORY_CROSS) / RADULA_PATH_PKG_CONFIG_SYSTEM_LIBRARY_PATH)

proc radula_behave_bootstrap_cross_environment_teeth*() =
    let cross_compile = getEnv(RADULA_ENVIRONMENT_TUPLE_TARGET) & "-"

    putEnv(RADULA_ENVIRONMENT_CROSS_ARCHIVER, cross_compile & RADULA_CROSS_ARCHIVER)
    putEnv(RADULA_ENVIRONMENT_CROSS_ASSEMBLER, cross_compile & RADULA_CROSS_ASSEMBLER)
    putEnv(RADULA_ENVIRONMENT_CROSS_BUILD_C_COMPILER, RADULA_CROSS_C_COMPILER)
    putEnv(RADULA_ENVIRONMENT_CROSS_C_COMPILER, cross_compile & RADULA_CROSS_C_COMPILER)
    putEnv(RADULA_ENVIRONMENT_CROSS_C_COMPILER_LINKER, RADULA_CROSS_C_CXX_COMPILER_LINKER)
    putEnv(RADULA_ENVIRONMENT_CROSS_C_PREPROCESSOR, cross_compile &
        RADULA_CROSS_C_COMPILER & " " & RADULA_CROSS_C_PREPROCESSOR)
    putEnv(RADULA_ENVIRONMENT_CROSS_COMPILE, cross_compile)
    putEnv(RADULA_ENVIRONMENT_CROSS_CXX_COMPILER, cross_compile & RADULA_CROSS_CXX_COMPILER)
    putEnv(RADULA_ENVIRONMENT_CROSS_CXX_COMPILER_LINKER, RADULA_CROSS_C_CXX_COMPILER_LINKER)
    putEnv(RADULA_ENVIRONMENT_CROSS_HOST_C_COMPILER, RADULA_CROSS_C_COMPILER)
    putEnv(RADULA_ENVIRONMENT_CROSS_HOST_CXX_COMPILER, RADULA_CROSS_CXX_COMPILER)
    putEnv(RADULA_ENVIRONMENT_CROSS_LINKER, cross_compile & RADULA_CROSS_LINKER)
    putEnv(RADULA_ENVIRONMENT_CROSS_NAMES, cross_compile & RADULA_CROSS_NAMES)
    putEnv(RADULA_ENVIRONMENT_CROSS_OBJECT_COPY, cross_compile & RADULA_CROSS_OBJECT_COPY)
    putEnv(RADULA_ENVIRONMENT_CROSS_OBJECT_DUMP, cross_compile & RADULA_CROSS_OBJECT_DUMP)
    putEnv(RADULA_ENVIRONMENT_CROSS_RANDOM_ACCESS_LIBRARY, cross_compile & RADULA_CROSS_RANDOM_ACCESS_LIBRARY)
    putEnv(RADULA_ENVIRONMENT_CROSS_READ_ELF, cross_compile & RADULA_CROSS_READ_ELF)
    putEnv(RADULA_ENVIRONMENT_CROSS_SIZE, cross_compile & RADULA_CROSS_SIZE)
    putEnv(RADULA_ENVIRONMENT_CROSS_STRINGS, cross_compile & RADULA_CROSS_STRINGS)
    putEnv(RADULA_ENVIRONMENT_CROSS_STRIP, cross_compile & RADULA_CROSS_STRIP)

proc radula_behave_bootstrap_cross_prepare*() =
    discard radula_behave_rsync(getEnv(RADULA_ENVIRONMENT_DIRECTORY_BACKUPS) /
        RADULA_DIRECTORY_CROSS, getEnv(RADULA_ENVIRONMENT_DIRECTORY_GLAUCUS))
    discard radula_behave_rsync(getEnv(RADULA_ENVIRONMENT_DIRECTORY_BACKUPS) /
        RADULA_DIRECTORY_TOOLCHAIN, getEnv(RADULA_ENVIRONMENT_DIRECTORY_GLAUCUS))

    removeDir(getEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS_BUILDS))
    createDir(getEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS_BUILDS))

    # Create the `src` directory if it doesn't exist, but don't remove it if it does exist!
    createDir(getEnv(RADULA_ENVIRONMENT_DIRECTORY_TEMPORARY_CROSS_SOURCES))

    # Create the `log` directory if it doesn't exist, but don't remove it if it does exist!
    createDir(getEnv(RADULA_ENVIRONMENT_DIRECTORY_LOGS))

    removeDir(getEnv(RADULA_ENVIRONMENT_FILE_CROSS_LOG))
